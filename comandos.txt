#or create a new repository on the command line
echo "# comandos_git" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/kgalarza95/comandos_git.git
git push -u origin main

##para forzar el push
git init
git add README.md
git add .
git commit -m "first commit"
git remote add origin https://github.com/userName/repoName.git
git push --force origin master


#or push an existing repository from the command line
git remote add origin https://github.com/kgalarza95/comandos_git.git
git branch -M main
git push -u origin main

importancia de -u y git push -u origin main  origin nombre de rama de github, master rama local

Cuando tienes mas de un repositorio remoto puedes utilizar el flag -u para configurar uno de ellos como el principal.

Supongamos que tienes un repo en BitBucket (bitbucket), otro en GitHub (origin) y otro en GitLab (gitlab). Para usar GitHub (origin) como principal debes usar git push -u origin <branch>. Las siguientes veces que hagas git push se enviarán a GitHub sin tener que especificarlo, pero para los otros dos sí tendrías que hacerlo.

Por ejemplo: git push bitbucket <branch> o git push gitlab <branch>. Es igual si tienes un solo repositorio y quieres evitar estar escribiendo git push origin <branch> puedes utilizar esta opción y solo hacer git push las siguientes veces.



--error de repositorios con historias diferentes, mal clonado
git pull origin master --allow-unrelated-histories

--ver repositorio remoto
git remote
or 
git remote show
--luego poner el nombre de la rama
git remote show origin


##con usuario y pass
git remote set-url origin https://name:password@github.org/repo.git

## el caso de no querer indicar un usuario y una contraseña simplemente se puede sacar esos datos de la URL, como se muestra a continuación.
git remote set-url origin https://github.org/repo.git


##clonar repositorio pero una rama en concreto
git clone --branch <branchname> <remote-repo-url>
o
git clone -b <branchname> <remote-repo-url>


##########################################################
GIT PUSH Y FETCH
git pull: Este comando realiza dos operaciones en una sola ejecución. Primero, realiza un git fetch para obtener los cambios del repositorio remoto y luego automáticamente realiza un git merge para fusionar esos cambios en la rama actual del repositorio local. Es decir, git pull obtiene los cambios y los aplica directamente en la rama activa.

En resumen, git pull descarga los cambios remotos y los fusiona automáticamente en la rama local activa.

git fetch: Este comando obtiene los cambios más recientes del repositorio remoto, pero no los aplica automáticamente en el repositorio local. En cambio, actualiza las referencias locales (como las ramas remotas) y descarga los commits y objetos necesarios para tener una copia local actualizada del repositorio remoto.

En resumen, git fetch descarga los cambios remotos y actualiza las referencias locales, pero no fusiona automáticamente los cambios en la rama local activa.
##########################################################


##descartar cambios locales y solo traer cambios remotos
git reset --hard origin-remoto/mirama

##subir cambios a un segundo repo remoto
git push nombre-remote mirama


## ver ramas remotas
 git branch -r


##cambiar de rama forzadamente
git checkout -f nom_rama

##eliminar rama
git branch -D nom_rama

##guardar cambios en pila para crear una nueva rama y cabiarme a ella
git stash 
#2 git branch nueva_ramaa
#3 git chekcout nueva rama
git stash pop


##subir cambios al remoto
git push -f orgin kgalarza:kgalarza    (mi rama:rama remota)
#git stash list ??

##descargar los cambiso de la rama remota
git fetch origin mi_rama
git reset --hard origin/main


##eliminar una rama  (-d es para eliminar, -D eliminar ignorando los cambios)
git branch -D nom_rama

##crear nueva rama y cambiarse a ella directo (-b    branch)
git checkout -b nom_new_rama


##cambiar nombre a repo remoto
git remote rename orgin origin


############################################################################################
git checkout -b kgalarza  ##crer nueva rama y cabiarse a ella  (checkout b->branch)

git fetch origin main     ##trae los cambios de la rama main del repo remoto

git reset ---hard origin/main  ## (repo-remoto/rama-remota) Este comando restablece (reset) el repositorio local al estado exacto de la rama main del repositorio remoto origin. La opción --hard descarta todos los cambios locales y los reemplaza con la versión más reciente de la rama remota main.

git merge squash kagalarza     ##Este comando fusiona (merge) la rama kgalarza en la rama actual. La opción squash indica que los cambios de la rama kgalarza se fusionarán en un solo commit, lo que ayuda a mantener un historial de commits más limpio y coherente.

git push -f origin main:kglarza   ##enviar mis cambios a un repo remoto "origin" de mi rama "main" y crear o actualizar "forzadamente" la rama "kgalarza"

git branch -D ramaDelete          ##elimina la rama auqnue hayan cambios sin funcionar

############################################################################################


